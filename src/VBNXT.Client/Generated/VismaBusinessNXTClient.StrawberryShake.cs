// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public static partial class VismaBusinessNXTClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::VBNXT.Client.State.VismaBusinessNXTClientStoreAccessor> AddVismaBusinessNXTClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::VBNXT.Client.State.VismaBusinessNXTClientStoreAccessor());
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VBNXT.Client.GetCustomersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VBNXT.Client.GetAvailableCompaniesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VBNXT.Client.VismaBusinessNXTClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VBNXT.Client.IVismaBusinessNXTClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::VBNXT.Client.State.VismaBusinessNXTClientStoreAccessor>("VismaBusinessNXTClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("VismaBusinessNXTClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VBNXT.Client.IGetCustomersResult>, global::VBNXT.Client.State.GetCustomersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VBNXT.Client.IGetCustomersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VBNXT.Client.IGetCustomersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VBNXT.Client.IGetCustomersResult>, global::VBNXT.Client.State.GetCustomersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VBNXT.Client.IGetCustomersResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::VBNXT.Client.IGetCustomersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VBNXT.Client.IGetCustomersResult>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VBNXT.Client.GetCustomersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VBNXT.Client.IGetCustomersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VBNXT.Client.GetCustomersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VBNXT.Client.IGetAvailableCompaniesResult>, global::VBNXT.Client.State.GetAvailableCompaniesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VBNXT.Client.IGetAvailableCompaniesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VBNXT.Client.IGetAvailableCompaniesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VBNXT.Client.IGetAvailableCompaniesResult>, global::VBNXT.Client.State.GetAvailableCompaniesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VBNXT.Client.IGetAvailableCompaniesResult>>(services, sp => new global::StrawberryShake.StorelessOperationExecutor<global::System.Text.Json.JsonDocument, global::VBNXT.Client.IGetAvailableCompaniesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VBNXT.Client.IGetAvailableCompaniesResult>>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VBNXT.Client.GetAvailableCompaniesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VBNXT.Client.IGetAvailableCompaniesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VBNXT.Client.GetAvailableCompaniesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VBNXT.Client.VismaBusinessNXTClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VBNXT.Client.IVismaBusinessNXTClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VBNXT.Client.VismaBusinessNXTClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace VBNXT.Client
{
    /// <summary>
    /// The root of all query types.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCustomersResult : global::System.IEquatable<GetCustomersResult>, IGetCustomersResult
    {
        public GetCustomersResult(global::VBNXT.Client.IGetCustomers_UseCompany? useCompany)
        {
            UseCompany = useCompany;
        }

        /// <summary>
        /// The query context for a company.
        /// </summary>
        public global::VBNXT.Client.IGetCustomers_UseCompany? UseCompany { get; }

        public virtual global::System.Boolean Equals(GetCustomersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UseCompany is null && other.UseCompany is null) || UseCompany != null && UseCompany.Equals(other.UseCompany)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UseCompany != null)
                {
                    hash ^= 397 * UseCompany.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCustomers_UseCompany_Query_UseCompany : global::System.IEquatable<GetCustomers_UseCompany_Query_UseCompany>, IGetCustomers_UseCompany_Query_UseCompany
    {
        public GetCustomers_UseCompany_Query_UseCompany(global::VBNXT.Client.IGetCustomers_UseCompany_Associate? associate)
        {
            Associate = associate;
        }

        /// <summary>
        /// A field for accessing the data from the table `Associate`
        /// </summary>
        public global::VBNXT.Client.IGetCustomers_UseCompany_Associate? Associate { get; }

        public virtual global::System.Boolean Equals(GetCustomers_UseCompany_Query_UseCompany? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Associate is null && other.Associate is null) || Associate != null && Associate.Equals(other.Associate)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomers_UseCompany_Query_UseCompany)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Associate != null)
                {
                    hash ^= 397 * Associate.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection from an object to a list of objects of type `Associate`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCustomers_UseCompany_Associate_Query_UseCompany_Associate_Connection : global::System.IEquatable<GetCustomers_UseCompany_Associate_Query_UseCompany_Associate_Connection>, IGetCustomers_UseCompany_Associate_Query_UseCompany_Associate_Connection
    {
        public GetCustomers_UseCompany_Associate_Query_UseCompany_Associate_Connection(global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.IGetCustomers_UseCompany_Associate_Items?>? items)
        {
            Items = items;
        }

        /// <summary>
        /// Array of rows returned by the query operation.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.IGetCustomers_UseCompany_Associate_Items?>? Items { get; }

        public virtual global::System.Boolean Equals(GetCustomers_UseCompany_Associate_Query_UseCompany_Associate_Connection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Items, other.Items));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomers_UseCompany_Associate_Query_UseCompany_Associate_Connection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Items != null)
                {
                    foreach (var Items_elm in Items)
                    {
                        if (Items_elm != null)
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Table "Actor" (152).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCustomers_UseCompany_Associate_Items_Associate : global::System.IEquatable<GetCustomers_UseCompany_Associate_Items_Associate>, IGetCustomers_UseCompany_Associate_Items_Associate
    {
        public GetCustomers_UseCompany_Associate_Items_Associate(global::System.Int32? associateNo, global::System.Int32? customerNo, global::System.String? name, global::System.String? companyNo, global::System.String? addressLine1, global::System.String? postCode, global::System.String? postalArea, global::VBNXT.Client.IGetCustomers_UseCompany_Associate_Items_Country? country)
        {
            AssociateNo = associateNo;
            CustomerNo = customerNo;
            Name = name;
            CompanyNo = companyNo;
            AddressLine1 = addressLine1;
            PostCode = postCode;
            PostalArea = postalArea;
            Country = country;
        }

        /// <summary>
        /// [PK] Column "ActNo" (4028) / Model.Column.ActorNo.
        /// </summary>
        public global::System.Int32? AssociateNo { get; }

        /// <summary>
        /// Column "CustNo" (4045) / Model.Column.CustomerNo.
        /// </summary>
        public global::System.Int32? CustomerNo { get; }

        /// <summary>
        /// Column "Nm" (4029) / Model.Column.Name.
        /// </summary>
        public global::System.String? Name { get; }

        /// <summary>
        /// Column "BsNo" (4109) / Model.Column.BusinessNo.
        /// </summary>
        public global::System.String? CompanyNo { get; }

        /// <summary>
        /// Column "Ad1" (4030) / Model.Column.Address1.
        /// </summary>
        public global::System.String? AddressLine1 { get; }

        /// <summary>
        /// Column "PNo" (4034) / Model.Column.PostNo.
        /// </summary>
        public global::System.String? PostCode { get; }

        /// <summary>
        /// Column "PArea" (4035) / Model.Column.PostPlace.
        /// </summary>
        public global::System.String? PostalArea { get; }

        /// <summary>
        /// A one-to-one relation, "Country" (678), from "Associate" (table "Actor" (152), columns {Ctry, 4036}) to "Country" (table "Ctry" (29), columns {CtryNo, 549}).
        /// </summary>
        public global::VBNXT.Client.IGetCustomers_UseCompany_Associate_Items_Country? Country { get; }

        public virtual global::System.Boolean Equals(GetCustomers_UseCompany_Associate_Items_Associate? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AssociateNo == other.AssociateNo) && CustomerNo == other.CustomerNo && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((CompanyNo is null && other.CompanyNo is null) || CompanyNo != null && CompanyNo.Equals(other.CompanyNo)) && ((AddressLine1 is null && other.AddressLine1 is null) || AddressLine1 != null && AddressLine1.Equals(other.AddressLine1)) && ((PostCode is null && other.PostCode is null) || PostCode != null && PostCode.Equals(other.PostCode)) && ((PostalArea is null && other.PostalArea is null) || PostalArea != null && PostalArea.Equals(other.PostalArea)) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomers_UseCompany_Associate_Items_Associate)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AssociateNo != null)
                {
                    hash ^= 397 * AssociateNo.GetHashCode();
                }

                if (CustomerNo != null)
                {
                    hash ^= 397 * CustomerNo.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (CompanyNo != null)
                {
                    hash ^= 397 * CompanyNo.GetHashCode();
                }

                if (AddressLine1 != null)
                {
                    hash ^= 397 * AddressLine1.GetHashCode();
                }

                if (PostCode != null)
                {
                    hash ^= 397 * PostCode.GetHashCode();
                }

                if (PostalArea != null)
                {
                    hash ^= 397 * PostalArea.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Table "Ctry" (29).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCustomers_UseCompany_Associate_Items_Country_Country : global::System.IEquatable<GetCustomers_UseCompany_Associate_Items_Country_Country>, IGetCustomers_UseCompany_Associate_Items_Country_Country
    {
        public GetCustomers_UseCompany_Associate_Items_Country_Country(global::System.String? name)
        {
            Name = name;
        }

        /// <summary>
        /// Column "Nm" (551) / Model.Column.Name.
        /// </summary>
        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetCustomers_UseCompany_Associate_Items_Country_Country? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomers_UseCompany_Associate_Items_Country_Country)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The root of all query types.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCustomersResult
    {
        /// <summary>
        /// The query context for a company.
        /// </summary>
        public global::VBNXT.Client.IGetCustomers_UseCompany? UseCompany { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCustomers_UseCompany
    {
        /// <summary>
        /// A field for accessing the data from the table `Associate`
        /// </summary>
        public global::VBNXT.Client.IGetCustomers_UseCompany_Associate? Associate { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCustomers_UseCompany_Query_UseCompany : IGetCustomers_UseCompany
    {
    }

    /// <summary>
    /// A connection from an object to a list of objects of type `Associate`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCustomers_UseCompany_Associate
    {
        /// <summary>
        /// Array of rows returned by the query operation.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.IGetCustomers_UseCompany_Associate_Items?>? Items { get; }
    }

    /// <summary>
    /// A connection from an object to a list of objects of type `Associate`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCustomers_UseCompany_Associate_Query_UseCompany_Associate_Connection : IGetCustomers_UseCompany_Associate
    {
    }

    /// <summary>
    /// Table "Actor" (152).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCustomers_UseCompany_Associate_Items
    {
        /// <summary>
        /// [PK] Column "ActNo" (4028) / Model.Column.ActorNo.
        /// </summary>
        public global::System.Int32? AssociateNo { get; }

        /// <summary>
        /// Column "CustNo" (4045) / Model.Column.CustomerNo.
        /// </summary>
        public global::System.Int32? CustomerNo { get; }

        /// <summary>
        /// Column "Nm" (4029) / Model.Column.Name.
        /// </summary>
        public global::System.String? Name { get; }

        /// <summary>
        /// Column "BsNo" (4109) / Model.Column.BusinessNo.
        /// </summary>
        public global::System.String? CompanyNo { get; }

        /// <summary>
        /// Column "Ad1" (4030) / Model.Column.Address1.
        /// </summary>
        public global::System.String? AddressLine1 { get; }

        /// <summary>
        /// Column "PNo" (4034) / Model.Column.PostNo.
        /// </summary>
        public global::System.String? PostCode { get; }

        /// <summary>
        /// Column "PArea" (4035) / Model.Column.PostPlace.
        /// </summary>
        public global::System.String? PostalArea { get; }

        /// <summary>
        /// A one-to-one relation, "Country" (678), from "Associate" (table "Actor" (152), columns {Ctry, 4036}) to "Country" (table "Ctry" (29), columns {CtryNo, 549}).
        /// </summary>
        public global::VBNXT.Client.IGetCustomers_UseCompany_Associate_Items_Country? Country { get; }
    }

    /// <summary>
    /// Table "Actor" (152).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCustomers_UseCompany_Associate_Items_Associate : IGetCustomers_UseCompany_Associate_Items
    {
    }

    /// <summary>
    /// Table "Ctry" (29).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCustomers_UseCompany_Associate_Items_Country
    {
        /// <summary>
        /// Column "Nm" (551) / Model.Column.Name.
        /// </summary>
        public global::System.String? Name { get; }
    }

    /// <summary>
    /// Table "Ctry" (29).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCustomers_UseCompany_Associate_Items_Country_Country : IGetCustomers_UseCompany_Associate_Items_Country
    {
    }

    /// <summary>
    /// The root of all query types.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetAvailableCompaniesResult : global::System.IEquatable<GetAvailableCompaniesResult>, IGetAvailableCompaniesResult
    {
        public GetAvailableCompaniesResult(global::VBNXT.Client.IGetAvailableCompanies_AvailableCompanies? availableCompanies)
        {
            AvailableCompanies = availableCompanies;
        }

        /// <summary>
        /// Companies available to the authenticated user.
        /// </summary>
        public global::VBNXT.Client.IGetAvailableCompanies_AvailableCompanies? AvailableCompanies { get; }

        public virtual global::System.Boolean Equals(GetAvailableCompaniesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AvailableCompanies is null && other.AvailableCompanies is null) || AvailableCompanies != null && AvailableCompanies.Equals(other.AvailableCompanies)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAvailableCompaniesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AvailableCompanies != null)
                {
                    hash ^= 397 * AvailableCompanies.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The type of the available companies connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetAvailableCompanies_AvailableCompanies_Query_AvailableCompanies : global::System.IEquatable<GetAvailableCompanies_AvailableCompanies_Query_AvailableCompanies>, IGetAvailableCompanies_AvailableCompanies_Query_AvailableCompanies
    {
        public GetAvailableCompanies_AvailableCompanies_Query_AvailableCompanies(global::System.Int32? totalCount, global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.IGetAvailableCompanies_AvailableCompanies_Items>? items)
        {
            TotalCount = totalCount;
            Items = items;
        }

        /// <summary>
        /// A count of the total number of objects in this connection.
        /// </summary>
        public global::System.Int32? TotalCount { get; }

        /// <summary>
        /// An array of objects representing the available companies
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.IGetAvailableCompanies_AvailableCompanies_Items>? Items { get; }

        public virtual global::System.Boolean Equals(GetAvailableCompanies_AvailableCompanies_Query_AvailableCompanies? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Items, other.Items);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAvailableCompanies_AvailableCompanies_Query_AvailableCompanies)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (TotalCount != null)
                {
                    hash ^= 397 * TotalCount.GetHashCode();
                }

                if (Items != null)
                {
                    foreach (var Items_elm in Items)
                    {
                        hash ^= 397 * Items_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An object that contains the VBC company info.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetAvailableCompanies_AvailableCompanies_Items_VbcCompany : global::System.IEquatable<GetAvailableCompanies_AvailableCompanies_Items_VbcCompany>, IGetAvailableCompanies_AvailableCompanies_Items_VbcCompany
    {
        public GetAvailableCompanies_AvailableCompanies_Items_VbcCompany(global::System.String? name, global::System.Int64? vismaNetCompanyId)
        {
            Name = name;
            VismaNetCompanyId = vismaNetCompanyId;
        }

        public global::System.String? Name { get; }

        public global::System.Int64? VismaNetCompanyId { get; }

        public virtual global::System.Boolean Equals(GetAvailableCompanies_AvailableCompanies_Items_VbcCompany? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && VismaNetCompanyId == other.VismaNetCompanyId;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAvailableCompanies_AvailableCompanies_Items_VbcCompany)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (VismaNetCompanyId != null)
                {
                    hash ^= 397 * VismaNetCompanyId.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The root of all query types.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetAvailableCompaniesResult
    {
        /// <summary>
        /// Companies available to the authenticated user.
        /// </summary>
        public global::VBNXT.Client.IGetAvailableCompanies_AvailableCompanies? AvailableCompanies { get; }
    }

    /// <summary>
    /// The type of the available companies connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetAvailableCompanies_AvailableCompanies
    {
        /// <summary>
        /// A count of the total number of objects in this connection.
        /// </summary>
        public global::System.Int32? TotalCount { get; }

        /// <summary>
        /// An array of objects representing the available companies
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.IGetAvailableCompanies_AvailableCompanies_Items>? Items { get; }
    }

    /// <summary>
    /// The type of the available companies connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetAvailableCompanies_AvailableCompanies_Query_AvailableCompanies : IGetAvailableCompanies_AvailableCompanies
    {
    }

    /// <summary>
    /// An object that contains the VBC company info.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetAvailableCompanies_AvailableCompanies_Items
    {
        public global::System.String? Name { get; }

        public global::System.Int64? VismaNetCompanyId { get; }
    }

    /// <summary>
    /// An object that contains the VBC company info.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetAvailableCompanies_AvailableCompanies_Items_VbcCompany : IGetAvailableCompanies_AvailableCompanies_Items
    {
    }

    /// <summary>
    /// Represents the operation service of the GetCustomers GraphQL operation
    /// <code>
    /// query GetCustomers($cid: Int!) {
    ///   useCompany(no: $cid) {
    ///     __typename
    ///     associate(filter: { customerNo: { _gt: 0 } }, sortOrder: { name: ASC }) {
    ///       __typename
    ///       items {
    ///         __typename
    ///         associateNo
    ///         customerNo
    ///         name
    ///         companyNo
    ///         addressLine1
    ///         postCode
    ///         postalArea
    ///         country: joinup_Country {
    ///           __typename
    ///           name
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCustomersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCustomersQueryDocument()
        {
        }

        public static GetCustomersQueryDocument Instance { get; } = new GetCustomersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x28, 0x24, 0x63, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x28, 0x6e, 0x6f, 0x3a, 0x20, 0x24, 0x63, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x3a, 0x20, 0x7b, 0x20, 0x5f, 0x67, 0x74, 0x3a, 0x20, 0x30, 0x20, 0x7d, 0x20, 0x7d, 0x2c, 0x20, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x75, 0x70, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "4f5f60e30cb5736cef0c23f0ccab83a5");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCustomers GraphQL operation
    /// <code>
    /// query GetCustomers($cid: Int!) {
    ///   useCompany(no: $cid) {
    ///     __typename
    ///     associate(filter: { customerNo: { _gt: 0 } }, sortOrder: { name: ASC }) {
    ///       __typename
    ///       items {
    ///         __typename
    ///         associateNo
    ///         customerNo
    ///         name
    ///         companyNo
    ///         addressLine1
    ///         postCode
    ///         postalArea
    ///         country: joinup_Country {
    ///           __typename
    ///           name
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCustomersQuery : global::VBNXT.Client.IGetCustomersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCustomersResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetCustomersQuery(global::StrawberryShake.IOperationExecutor<IGetCustomersResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCustomersResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCustomersResult>> ExecuteAsync(global::System.Int32 cid, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(cid);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCustomersResult>> Watch(global::System.Int32 cid, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(cid);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 cid)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("cid", FormatCid(cid));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCustomersQueryDocument.Instance.Hash.Value, name: "GetCustomers", document: GetCustomersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCid(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCustomers GraphQL operation
    /// <code>
    /// query GetCustomers($cid: Int!) {
    ///   useCompany(no: $cid) {
    ///     __typename
    ///     associate(filter: { customerNo: { _gt: 0 } }, sortOrder: { name: ASC }) {
    ///       __typename
    ///       items {
    ///         __typename
    ///         associateNo
    ///         customerNo
    ///         name
    ///         companyNo
    ///         addressLine1
    ///         postCode
    ///         postalArea
    ///         country: joinup_Country {
    ///           __typename
    ///           name
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCustomersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCustomersResult>> ExecuteAsync(global::System.Int32 cid, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCustomersResult>> Watch(global::System.Int32 cid, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetAvailableCompanies GraphQL operation
    /// <code>
    /// query GetAvailableCompanies {
    ///   availableCompanies {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       name
    ///       vismaNetCompanyId
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetAvailableCompaniesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAvailableCompaniesQueryDocument()
        {
        }

        public static GetAvailableCompaniesQueryDocument Instance { get; } = new GetAvailableCompaniesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x69, 0x73, 0x6d, 0x61, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "6414169acd4760207c5388c436e9c538");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAvailableCompanies GraphQL operation
    /// <code>
    /// query GetAvailableCompanies {
    ///   availableCompanies {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       name
    ///       vismaNetCompanyId
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetAvailableCompaniesQuery : global::VBNXT.Client.IGetAvailableCompaniesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAvailableCompaniesResult> _operationExecutor;
        public GetAvailableCompaniesQuery(global::StrawberryShake.IOperationExecutor<IGetAvailableCompaniesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAvailableCompaniesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAvailableCompaniesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAvailableCompaniesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAvailableCompaniesQueryDocument.Instance.Hash.Value, name: "GetAvailableCompanies", document: GetAvailableCompaniesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAvailableCompanies GraphQL operation
    /// <code>
    /// query GetAvailableCompanies {
    ///   availableCompanies {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       name
    ///       vismaNetCompanyId
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetAvailableCompaniesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAvailableCompaniesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAvailableCompaniesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the VismaBusinessNXTClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class VismaBusinessNXTClient : global::VBNXT.Client.IVismaBusinessNXTClient
    {
        private readonly global::VBNXT.Client.IGetCustomersQuery _getCustomers;
        private readonly global::VBNXT.Client.IGetAvailableCompaniesQuery _getAvailableCompanies;
        public VismaBusinessNXTClient(global::VBNXT.Client.IGetCustomersQuery getCustomers, global::VBNXT.Client.IGetAvailableCompaniesQuery getAvailableCompanies)
        {
            _getCustomers = getCustomers ?? throw new global::System.ArgumentNullException(nameof(getCustomers));
            _getAvailableCompanies = getAvailableCompanies ?? throw new global::System.ArgumentNullException(nameof(getAvailableCompanies));
        }

        public static global::System.String ClientName => "VismaBusinessNXTClient";
        public global::VBNXT.Client.IGetCustomersQuery GetCustomers => _getCustomers;
        public global::VBNXT.Client.IGetAvailableCompaniesQuery GetAvailableCompanies => _getAvailableCompanies;
    }

    /// <summary>
    /// Represents the VismaBusinessNXTClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IVismaBusinessNXTClient
    {
        global::VBNXT.Client.IGetCustomersQuery GetCustomers { get; }

        global::VBNXT.Client.IGetAvailableCompaniesQuery GetAvailableCompanies { get; }
    }
}

namespace VBNXT.Client.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCustomersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VBNXT.Client.GetCustomersResult>
    {
        public GetCustomersResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VBNXT.Client.IGetCustomersResult);
        public GetCustomersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetCustomersResultInfo info)
            {
                return new GetCustomersResult(MapIGetCustomers_UseCompany(info.UseCompany));
            }

            throw new global::System.ArgumentException("GetCustomersResultInfo expected.");
        }

        private global::VBNXT.Client.IGetCustomers_UseCompany? MapIGetCustomers_UseCompany(global::VBNXT.Client.State.Query_UseCompanyData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomers_UseCompany returnValue = default !;
            if (data?.__typename.Equals("Query_UseCompany", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomers_UseCompany_Query_UseCompany(MapIGetCustomers_UseCompany_Associate(data.Associate));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::VBNXT.Client.IGetCustomers_UseCompany_Associate? MapIGetCustomers_UseCompany_Associate(global::VBNXT.Client.State.Query_UseCompany_Associate_ConnectionData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomers_UseCompany_Associate returnValue = default !;
            if (data?.__typename.Equals("Query_UseCompany_Associate_Connection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomers_UseCompany_Associate_Query_UseCompany_Associate_Connection(MapIGetCustomers_UseCompany_Associate_ItemsArray(data.Items));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.IGetCustomers_UseCompany_Associate_Items?>? MapIGetCustomers_UseCompany_Associate_ItemsArray(global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.State.AssociateData?>? list)
        {
            if (list is null)
            {
                return null;
            }

            var associates = new global::System.Collections.Generic.List<global::VBNXT.Client.IGetCustomers_UseCompany_Associate_Items?>();
            foreach (global::VBNXT.Client.State.AssociateData? child in list)
            {
                associates.Add(MapIGetCustomers_UseCompany_Associate_Items(child));
            }

            return associates;
        }

        private global::VBNXT.Client.IGetCustomers_UseCompany_Associate_Items? MapIGetCustomers_UseCompany_Associate_Items(global::VBNXT.Client.State.AssociateData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomers_UseCompany_Associate_Items returnValue = default !;
            if (data?.__typename.Equals("Associate", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomers_UseCompany_Associate_Items_Associate(data.AssociateNo, data.CustomerNo, data.Name, data.CompanyNo, data.AddressLine1, data.PostCode, data.PostalArea, MapIGetCustomers_UseCompany_Associate_Items_Country(data.Country));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::VBNXT.Client.IGetCustomers_UseCompany_Associate_Items_Country? MapIGetCustomers_UseCompany_Associate_Items_Country(global::VBNXT.Client.State.CountryData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomers_UseCompany_Associate_Items_Country returnValue = default !;
            if (data?.__typename.Equals("Country", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomers_UseCompany_Associate_Items_Country_Country(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCustomersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetCustomersResultInfo(global::VBNXT.Client.State.Query_UseCompanyData? useCompany)
        {
            UseCompany = useCompany;
        }

        /// <summary>
        /// The query context for a company.
        /// </summary>
        public global::VBNXT.Client.State.Query_UseCompanyData? UseCompany { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCustomersResultInfo(UseCompany);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetAvailableCompaniesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VBNXT.Client.GetAvailableCompaniesResult>
    {
        public GetAvailableCompaniesResultFactory()
        {
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VBNXT.Client.IGetAvailableCompaniesResult);
        public GetAvailableCompaniesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (dataInfo is GetAvailableCompaniesResultInfo info)
            {
                return new GetAvailableCompaniesResult(MapIGetAvailableCompanies_AvailableCompanies(info.AvailableCompanies));
            }

            throw new global::System.ArgumentException("GetAvailableCompaniesResultInfo expected.");
        }

        private global::VBNXT.Client.IGetAvailableCompanies_AvailableCompanies? MapIGetAvailableCompanies_AvailableCompanies(global::VBNXT.Client.State.Query_AvailableCompaniesData? data)
        {
            if (data is null)
            {
                return null;
            }

            IGetAvailableCompanies_AvailableCompanies returnValue = default !;
            if (data?.__typename.Equals("Query_AvailableCompanies", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAvailableCompanies_AvailableCompanies_Query_AvailableCompanies(data.TotalCount, MapIGetAvailableCompanies_AvailableCompanies_ItemsNonNullableArray(data.Items));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.IGetAvailableCompanies_AvailableCompanies_Items>? MapIGetAvailableCompanies_AvailableCompanies_ItemsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.State.VbcCompanyData>? list)
        {
            if (list is null)
            {
                return null;
            }

            var vbcCompanys = new global::System.Collections.Generic.List<global::VBNXT.Client.IGetAvailableCompanies_AvailableCompanies_Items>();
            foreach (global::VBNXT.Client.State.VbcCompanyData child in list)
            {
                vbcCompanys.Add(MapNonNullableIGetAvailableCompanies_AvailableCompanies_Items(child));
            }

            return vbcCompanys;
        }

        private global::VBNXT.Client.IGetAvailableCompanies_AvailableCompanies_Items MapNonNullableIGetAvailableCompanies_AvailableCompanies_Items(global::VBNXT.Client.State.VbcCompanyData data)
        {
            IGetAvailableCompanies_AvailableCompanies_Items returnValue = default !;
            if (data.__typename.Equals("VbcCompany", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetAvailableCompanies_AvailableCompanies_Items_VbcCompany(data.Name, data.VismaNetCompanyId);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetAvailableCompaniesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        public GetAvailableCompaniesResultInfo(global::VBNXT.Client.State.Query_AvailableCompaniesData? availableCompanies)
        {
            AvailableCompanies = availableCompanies;
        }

        /// <summary>
        /// Companies available to the authenticated user.
        /// </summary>
        public global::VBNXT.Client.State.Query_AvailableCompaniesData? AvailableCompanies { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => global::System.Array.Empty<global::StrawberryShake.EntityId>();
        public global::System.UInt64 Version => 0;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAvailableCompaniesResultInfo(AvailableCompanies);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCustomersBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VBNXT.Client.IGetCustomersResult>
    {
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VBNXT.Client.IGetCustomersResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetCustomersBuilder(global::StrawberryShake.IOperationResultDataFactory<global::VBNXT.Client.IGetCustomersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetCustomersResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetCustomersResult Result, GetCustomersResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetCustomersResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetCustomersResult, GetCustomersResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var resultInfo = new GetCustomersResultInfo(DeserializeIGetCustomers_UseCompany(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "useCompany")));
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VBNXT.Client.State.Query_UseCompanyData? DeserializeIGetCustomers_UseCompany(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_UseCompany", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VBNXT.Client.State.Query_UseCompanyData(typename, associate: DeserializeIGetCustomers_UseCompany_Associate(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "associate")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::VBNXT.Client.State.Query_UseCompany_Associate_ConnectionData? DeserializeIGetCustomers_UseCompany_Associate(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_UseCompany_Associate_Connection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VBNXT.Client.State.Query_UseCompany_Associate_ConnectionData(typename, items: DeserializeIGetCustomers_UseCompany_Associate_ItemsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.State.AssociateData?>? DeserializeIGetCustomers_UseCompany_Associate_ItemsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var associates = new global::System.Collections.Generic.List<global::VBNXT.Client.State.AssociateData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                associates.Add(DeserializeIGetCustomers_UseCompany_Associate_Items(child));
            }

            return associates;
        }

        private global::VBNXT.Client.State.AssociateData? DeserializeIGetCustomers_UseCompany_Associate_Items(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Associate", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VBNXT.Client.State.AssociateData(typename, associateNo: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "associateNo")), customerNo: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "customerNo")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), companyNo: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "companyNo")), addressLine1: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addressLine1")), postCode: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "postCode")), postalArea: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "postalArea")), country: DeserializeIGetCustomers_UseCompany_Associate_Items_Country(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::VBNXT.Client.State.CountryData? DeserializeIGetCustomers_UseCompany_Associate_Items_Country(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Country", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VBNXT.Client.State.CountryData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetAvailableCompaniesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VBNXT.Client.IGetAvailableCompaniesResult>
    {
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VBNXT.Client.IGetAvailableCompaniesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        public GetAvailableCompaniesBuilder(global::StrawberryShake.IOperationResultDataFactory<global::VBNXT.Client.IGetAvailableCompaniesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetAvailableCompaniesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetAvailableCompaniesResult Result, GetAvailableCompaniesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetAvailableCompaniesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetAvailableCompaniesResult, GetAvailableCompaniesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var resultInfo = new GetAvailableCompaniesResultInfo(DeserializeIGetAvailableCompanies_AvailableCompanies(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "availableCompanies")));
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VBNXT.Client.State.Query_AvailableCompaniesData? DeserializeIGetAvailableCompanies_AvailableCompanies(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Query_AvailableCompanies", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VBNXT.Client.State.Query_AvailableCompaniesData(typename, totalCount: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")), items: DeserializeIGetAvailableCompanies_AvailableCompanies_ItemsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.State.VbcCompanyData>? DeserializeIGetAvailableCompanies_AvailableCompanies_ItemsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var vbcCompanys = new global::System.Collections.Generic.List<global::VBNXT.Client.State.VbcCompanyData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                vbcCompanys.Add(DeserializeNonNullableIGetAvailableCompanies_AvailableCompanies_Items(child));
            }

            return vbcCompanys;
        }

        private global::VBNXT.Client.State.VbcCompanyData DeserializeNonNullableIGetAvailableCompanies_AvailableCompanies_Items(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("VbcCompany", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VBNXT.Client.State.VbcCompanyData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), vismaNetCompanyId: DeserializeInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "vismaNetCompanyId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int64? DeserializeInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class Query_UseCompanyData
    {
        public Query_UseCompanyData(global::System.String __typename, global::VBNXT.Client.State.Query_UseCompany_Associate_ConnectionData? associate = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Associate = associate;
        }

        public global::System.String __typename { get; }

        ///<summary>A field for accessing the data from the table `Associate`</summary>
        public global::VBNXT.Client.State.Query_UseCompany_Associate_ConnectionData? Associate { get; }
    }

    ///<summary>A connection from an object to a list of objects of type `Associate`.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class Query_UseCompany_Associate_ConnectionData
    {
        public Query_UseCompany_Associate_ConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.State.AssociateData?>? items = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Items = items;
        }

        public global::System.String __typename { get; }

        ///<summary>Array of rows returned by the query operation.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.State.AssociateData?>? Items { get; }
    }

    ///<summary>Table "Actor" (152).</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class AssociateData
    {
        public AssociateData(global::System.String __typename, global::System.Int32? associateNo = default !, global::System.Int32? customerNo = default !, global::System.String? name = default !, global::System.String? companyNo = default !, global::System.String? addressLine1 = default !, global::System.String? postCode = default !, global::System.String? postalArea = default !, global::VBNXT.Client.State.CountryData? country = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            AssociateNo = associateNo;
            CustomerNo = customerNo;
            Name = name;
            CompanyNo = companyNo;
            AddressLine1 = addressLine1;
            PostCode = postCode;
            PostalArea = postalArea;
            Country = country;
        }

        public global::System.String __typename { get; }

        ///<summary>[PK] Column "ActNo" (4028) / Model.Column.ActorNo.</summary>
        public global::System.Int32? AssociateNo { get; }

        ///<summary>Column "CustNo" (4045) / Model.Column.CustomerNo.</summary>
        public global::System.Int32? CustomerNo { get; }

        ///<summary>Column "Nm" (4029) / Model.Column.Name.</summary>
        public global::System.String? Name { get; }

        ///<summary>Column "BsNo" (4109) / Model.Column.BusinessNo.</summary>
        public global::System.String? CompanyNo { get; }

        ///<summary>Column "Ad1" (4030) / Model.Column.Address1.</summary>
        public global::System.String? AddressLine1 { get; }

        ///<summary>Column "PNo" (4034) / Model.Column.PostNo.</summary>
        public global::System.String? PostCode { get; }

        ///<summary>Column "PArea" (4035) / Model.Column.PostPlace.</summary>
        public global::System.String? PostalArea { get; }

        ///<summary>A one-to-one relation, "Country" (678), from "Associate" (table "Actor" (152), columns {Ctry, 4036}) to "Country" (table "Ctry" (29), columns {CtryNo, 549}).</summary>
        public global::VBNXT.Client.State.CountryData? Country { get; }
    }

    ///<summary>Table "Ctry" (29).</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CountryData
    {
        public CountryData(global::System.String __typename, global::System.String? name = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
        }

        public global::System.String __typename { get; }

        ///<summary>Column "Nm" (551) / Model.Column.Name.</summary>
        public global::System.String? Name { get; }
    }

    ///<summary>The type of the available companies connection.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class Query_AvailableCompaniesData
    {
        public Query_AvailableCompaniesData(global::System.String __typename, global::System.Int32? totalCount = default !, global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.State.VbcCompanyData>? items = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            TotalCount = totalCount;
            Items = items;
        }

        public global::System.String __typename { get; }

        ///<summary>A count of the total number of objects in this connection.</summary>
        public global::System.Int32? TotalCount { get; }

        ///<summary>An array of objects representing the available companies</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::VBNXT.Client.State.VbcCompanyData>? Items { get; }
    }

    ///<summary>An object that contains the VBC company info.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class VbcCompanyData
    {
        public VbcCompanyData(global::System.String __typename, global::System.String? name = default !, global::System.Int64? vismaNetCompanyId = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            VismaNetCompanyId = vismaNetCompanyId;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }

        public global::System.Int64? VismaNetCompanyId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class VismaBusinessNXTClientStoreAccessor : global::StrawberryShake.IStoreAccessor
    {
        public global::StrawberryShake.IOperationStore OperationStore => throw new global::System.NotSupportedException("OperationStore is not supported in store less mode");
        public global::StrawberryShake.IEntityStore EntityStore => throw new global::System.NotSupportedException("EntityStore is not supported in store less mode");
        public global::StrawberryShake.IEntityIdSerializer EntityIdSerializer => throw new global::System.NotSupportedException("EntityIdSerializer is not supported in store less mode");
        public global::StrawberryShake.IOperationRequestFactory GetOperationRequestFactory(global::System.Type resultType)
        {
            throw new global::System.NotSupportedException("GetOperationRequestFactory is not supported in store less mode");
        }

        public global::StrawberryShake.IOperationResultDataFactory GetOperationResultDataFactory(global::System.Type resultType)
        {
            throw new global::System.NotSupportedException("GetOperationResultDataFactory is not supported in store less mode");
        }
    }
}
